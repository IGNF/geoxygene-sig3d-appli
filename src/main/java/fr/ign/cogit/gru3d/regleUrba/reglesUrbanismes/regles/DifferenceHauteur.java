//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB)
// Reference Implementation, v2.1.3-b01-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source
// schema.
// Generated on: 2009.10.26 at 12:24:15 PM CET
//

package fr.ign.cogit.gru3d.regleUrba.reglesUrbanismes.regles;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;

import fr.ign.cogit.geoxygene.sig3d.geometry.Box3D;
import fr.ign.cogit.gru3d.regleUrba.Executor;
import fr.ign.cogit.gru3d.regleUrba.representation.Incoherence;
import fr.ign.cogit.gru3d.regleUrba.schemageo.Batiment;
import fr.ign.cogit.gru3d.regleUrba.schemageo.Parcelle;
import fr.ign.cogit.gru3d.regleUrba.schemageo.Toit;

/**
 * 
 *        This software is released under the licence CeCILL
 * 
 *        see LICENSE.TXT
 * 
 *        see <http://www.cecill.info/ http://www.cecill.info/
 * 
 * 
 * 
 * @copyright IGN
 * 
 * @author Brasebin Mickaël
 * 
 * @version 1.0
 *
 * <p>
 * Java class for DifferenceHauteur complex type.
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name="DifferenceHauteur">
 *   &lt;complexContent>
 *     &lt;extension base="{}ConsequenceHauteur">
 *       &lt;sequence>
 *         &lt;element name="differenceHauteur" type="{http://www.w3.org/2001/XMLSchema}double"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DifferenceHauteur", propOrder = { "differenceHauteur" })
public class DifferenceHauteur extends ConsequenceHauteur {

  public DifferenceHauteur() {
  }

  public DifferenceHauteur(double differenceHauteur) {
    this.differenceHauteur = differenceHauteur;
  }

  protected double differenceHauteur;

  /**
   * Gets the value of the differenceHauteur property.
   */
  public double getDifferenceHauteur() {
    return this.differenceHauteur;
  }

  /**
   * Sets the value of the differenceHauteur property.
   */
  public void setDifferenceHauteur(double value) {
    this.differenceHauteur = value;
  }

  @Override
  public String toString() {
    return "La différence de hauteur entre les batiments de la parcelle ne peut exceder "
        + this.differenceHauteur;
  }

  @Override
  public List<Incoherence> isConsequenceChecked(Parcelle p, boolean represent) {

    List<Incoherence> lIncoherence = new ArrayList<Incoherence>();

    List<Batiment> lBatiments = p.getlBatimentsContenus();

    int nbBatiments = lBatiments.size();

    // Moins de 2 batiments, la hauteur est respectée
    if (nbBatiments < 2) {

      if (Executor.VERBOSE) {
        System.out
            .println("Conséquence vérifiée : différence de hauteur entre batiments");

      }
      return lIncoherence;
    }

    for (int i = 0; i < nbBatiments; i++) {
      Batiment bati = lBatiments.get(i);

      Toit t = bati.getToit();
      Box3D b = new Box3D(bati.getGeom());
      Box3D b2 = new Box3D(t.getGeom());
      // On calcule la hauteur
      double hauteur = b2.getURDP().getZ() - b.getLLDP().getZ();

      for (int j = 0; j < nbBatiments; j++) {

        Batiment bati2 = lBatiments.get(i);

        Toit t2 = bati2.getToit();
        Box3D bBat2 = new Box3D(bati2.getGeom());
        Box3D b2Bat2 = new Box3D(t2.getGeom());
        // On calcule la hauteur
        double hauteur2 = b2Bat2.getURDP().getZ() - bBat2.getLLDP().getZ();

        double diffHauteur = Math.abs(hauteur2 - hauteur);

        if (diffHauteur > this.differenceHauteur) {
          if (Executor.VERBOSE) {
            System.out
                .println("Conséquence bib vérifiée : différence de hauteur entre batiments");

          }

          if(represent){
          lIncoherence.add(new Incoherence(this, p, null));
          }else{
            lIncoherence.add(null);
          }
        }

      }

    }

    if (Executor.VERBOSE) {
      if (lIncoherence.size() == 0) {
        System.out
            .println("Conséquence vérifiée : différence de hauteur entre batiments");

      }

    }

    return lIncoherence;

  }

  public double hauteurMax(Parcelle p) {
    List<Batiment> lBatiments = new ArrayList<Batiment>();
    int nbBati = lBatiments.size();

    double hauteurMinBatiment = Double.POSITIVE_INFINITY;

    for (int i = 0; i < nbBati; i++) {

      Batiment b = lBatiments.get(i);
      Box3D box = new Box3D(b.getGeom());

      double hauteurTemp = box.getURDP().getZ() - box.getLLDP().getZ();
      hauteurMinBatiment = Math.min(hauteurMinBatiment, hauteurTemp);

    }

    return hauteurMinBatiment + this.getDifferenceHauteur();

  }

  public double hauteurMin(Parcelle p) {
    List<Batiment> lBatiments = new ArrayList<Batiment>();
    int nbBati = lBatiments.size();

    double hauteurMaxBatiment = Double.NEGATIVE_INFINITY;

    for (int i = 0; i < nbBati; i++) {

      Batiment b = lBatiments.get(i);
      Box3D box = new Box3D(b.getGeom());

      double hauteurTemp = box.getURDP().getZ() - box.getLLDP().getZ();
      hauteurMaxBatiment = Math.max(hauteurMaxBatiment, hauteurTemp);

    }

    return hauteurMaxBatiment - this.getDifferenceHauteur();
  }

}
