//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB)
// Reference Implementation, v2.1.3-b01-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source
// schema.
// Generated on: 2009.10.26 at 12:24:15 PM CET
//

package fr.ign.cogit.gru3d.regleUrba.reglesUrbanismes.regles;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;

import javax.media.j3d.BranchGroup;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;

import fr.ign.cogit.geoxygene.api.spatial.coordgeom.IDirectPosition;
import fr.ign.cogit.geoxygene.api.spatial.coordgeom.IDirectPositionList;
import fr.ign.cogit.geoxygene.api.spatial.geomprim.IOrientableSurface;
import fr.ign.cogit.geoxygene.sig3d.geometry.Box3D;
import fr.ign.cogit.geoxygene.sig3d.representation.sample.ObjectCartoon;
import fr.ign.cogit.geoxygene.sig3d.sample.Symbology;
import fr.ign.cogit.geoxygene.spatial.coordgeom.DirectPosition;
import fr.ign.cogit.geoxygene.spatial.coordgeom.DirectPositionList;
import fr.ign.cogit.geoxygene.spatial.coordgeom.GM_LineString;
import fr.ign.cogit.geoxygene.spatial.coordgeom.GM_Polygon;
import fr.ign.cogit.geoxygene.spatial.geomprim.GM_Point;
import fr.ign.cogit.gru3d.regleUrba.Executor;
import fr.ign.cogit.gru3d.regleUrba.representation.ContrainteHauteurRepresentation;
import fr.ign.cogit.gru3d.regleUrba.representation.Incoherence;
import fr.ign.cogit.gru3d.regleUrba.schemageo.Batiment;
import fr.ign.cogit.gru3d.regleUrba.schemageo.Parcelle;
import fr.ign.cogit.gru3d.regleUrba.schemageo.Toit;

/**
 * 
 *        This software is released under the licence CeCILL
 * 
 *        see LICENSE.TXT
 * 
 *        see <http://www.cecill.info/ http://www.cecill.info/
 * 
 * 
 * 
 * @copyright IGN
 * 
 * @author Brasebin Mickaël
 * 
 * @version 1.0
 *
 * <p>
 * Java class for ContrainteHauteur complex type.
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name="ContrainteHauteur">
 *   &lt;complexContent>
 *     &lt;extension base="{}ConsequenceHauteur">
 *       &lt;sequence>
 *         &lt;element name="hauteurMax" type="{http://www.w3.org/2001/XMLSchema}double"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ContrainteHauteur", propOrder = { "hauteurMax" })
public class ContrainteHauteur extends ConsequenceHauteur {

  protected double hauteurMax;

  public ContrainteHauteur() {
  }

  public ContrainteHauteur(double hauteurMax) {
    super();
    this.hauteurMax = hauteurMax;
  }

  /**
   * Gets the value of the hauteurMax property.
   */
  public double getHauteurMax() {
    return this.hauteurMax;
  }

  /**
   * Sets the value of the hauteurMax property.
   */
  public void setHauteurMax(double value) {
    this.hauteurMax = value;
  }

  @Override
  public String toString() {
    return "Le batiment ne peut dépasser cette hauteur " + this.hauteurMax;
  }

  // On regarde si la hauteur du batiment respecte la hauteur maximale
  @Override
  public List<Incoherence> isConsequenceChecked(Parcelle p, boolean represent) {

    List<Incoherence> lIncoherence = new ArrayList<Incoherence>();
    // On parcourt la liste des batiments
    List<Batiment> lBatiments = p.getlBatimentsContenus();

    int nbBatiments = lBatiments.size();

    for (int i = 0; i < nbBatiments; i++) {
      // On récupérer les boites englobantes du toit et du corps
      Batiment bati = lBatiments.get(i);
      Toit t = bati.getToit();
      Box3D b = new Box3D(bati.getGeom());
      Box3D b2 = new Box3D(t.getGeom());
      // On calcule la hauteur
      double hauteur = b2.getURDP().getZ() - b.getLLDP().getZ();
      // On compare par rapport à la hauteur max
      if (hauteur > this.getHauteurMax()) {
        if (Executor.VERBOSE) {
          System.out
              .println("Conséquence non vérifiée : hauteur du batiment non respectée" + hauteur + "  vs HMAX " + this.getHauteurMax());

        }
        /*
         * BranchGroup bg = null;
         * 
         * bg = this.genereBranchGroup(p, 25);
         */
        
        
        if(represent){

        GM_Point pt = new GM_Point(t.getGeom().centroid());

        if (Double.isNaN(pt.getPosition().getX())) {

          pt = new GM_Point(t.getGeom().coord().get(0));

        }

        pt.getPosition().setZ(b.getLLDP().getZ());
        BranchGroup bg = ContrainteHauteurRepresentation.generateBG(pt,
            hauteur + 5, Color.red, 10.0, "" + this.getHauteurMax(), 2.0, 3.0,
            Symbology.class.getResource("/demo3D/reglesurba/hauteur.png")
                .getPath());

        lIncoherence.add(new Incoherence(this, p, bg));
        
        }else{
          lIncoherence.add(null);
          return lIncoherence;
        }
      }

    }

    if (Executor.VERBOSE) {
      System.out.println("Conséquence vérifiée : hauteur du batiment" );

    }

    return lIncoherence;
  }

  private BranchGroup genereBranchGroup(Parcelle p, double hauteurMax) {
    IDirectPositionList dpl = p.getGeom().coord();
    IDirectPositionList dpl2 = new DirectPositionList();
    int nbPoints = dpl.size();

    for (int i = 0; i < nbPoints; i++) {
      IDirectPosition pTemp = dpl.get(i);
      DirectPosition dp = new DirectPosition(pTemp.getX(), pTemp.getY(),
          pTemp.getZ() + hauteurMax);
      dpl2.add(dp);
    }

    List<IOrientableSurface> lOS = new ArrayList<IOrientableSurface>();
    lOS.add(new GM_Polygon(new GM_LineString(dpl2)));

    ObjectCartoon ob = new ObjectCartoon();

    return ob.processGeom(lOS, Color.red, Color.black, 3, 1);
  }

}
